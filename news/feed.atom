<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>Italian Laravel News</title>
        <link>https://laravel-news.it</link>
        <description><![CDATA[Il Crowd Blog della community italiana di Laravel]]></description>
        <atom:link href="https://laravel-news.it/news/feed.atom" rel="self" type="application/rss+xml" />
        <language></language>
        <lastBuildDate>Tue, 20 Sep 2022 00:00:00 +0000</lastBuildDate>

                    <item>
                <title><![CDATA[Cosa c'è dietro la Cifratura/Decifratura di Laravel]]></title>
                <link>https://laravel-news.it/news/22-09-cosa-c-e-dietro-la-cifratura-decifratura-di-laravel</link>
                <guid isPermaLink="true">https://laravel-news.it/news/22-09-cosa-c-e-dietro-la-cifratura-decifratura-di-laravel</guid>
                <description><![CDATA[Uno sguardo dall'interno ai meccanismi di cifratura/decifatura di Laravel]]></description>
                <content:encoded><![CDATA[<p><strong><em>NOTA:</em></strong>  Traduzione da <a href="https://robertogallea.com/posts/development/whats-behind-laravel-encryptiondecryption">robertogallea.com</a></p>

<blockquote>
  <p><code>Il mio sistema è sicuro, usa la cifratura.</code></p>
</blockquote>

<p>Lo avrai sicuramente sentito/detto di tanto in tanto. Sicuro che lo è, ma <em>perchè</em> e <em>come</em> è sicuro? Lo sai <em>davvero</em>?</p>

<h2>Fondamentali della cifratura/decifratura di Laravel</h2>

<p>La cifratura/decifratura di Laravel è basata sulla classe <code>Illuminate\Encryption\Encrypter</code> , che è costruita passando una chiave di cifratura ed un cifrario (cioè l'algoritmo di cifratura):</p>

<ul>
<li><code>__construct($key, $cipher = 'AES-128-CBC')</code></li>
</ul>

<p>Supporta (fra gli altri) i seguenti metodi principali:</p>

<ul>
<li><code>encrypt($value, $serialize = true)</code></li>
<li><code>decrypt($payload, $unserialize = true)</code></li>
</ul>

<p>i quali, nemmeno a dirlo, sono usati per cifrare e decifrare dati.</p>

<pre><code>$encrypter = new Illuminate\Encryption\Encrypter('1234567812345678', 'AES-128-CBC');

$encrypted = $encrypter-&gt;encrypt('Hello world');
dump($encrypted);
// stampa qualcosa di simile a "eyJpdiI6ImdMd2dWcW5jMXBrUDBranRJZXQ5MEE9PSIsInZhbHVlIjoiNnhTODBSclB3ZVp3SFRRUWFWTHpReFQwYWQ1aXVmTmhXOXV5WHM2TzR1WT0iLCJtYWMiOiIwODQyZDhiMzZlNDQwZTZjYTRiYmI2MGE0MTgzNzk5NGNkZTU1Yzc5NDIyYzdjYmYwNzk2ZTA5MGNjYjc4MGYzIn0="

$decrypted = $encrypter-&gt;decrypt($encrypted);
dump($decrypted);
// stampa di nuovo "Hello world" 
</code></pre>

<p>Magnifico! Già solo questo è sufficiente per usarlo nel migliore dei modi.</p>

<p>Tuttavia, sei vuoi sapere cosa succede internamente, continua a leggere.</p>

<p><strong>ATTENZIONE! Considera che i risultati non saranno esattamente gli stessi, dato che alcuni valori sono generati casualmente, e dunque cambiano ad ogni esecuzione.</strong></p>

<h2>Come funziona la cifratura</h2>

<p>Il cifratore di Laravel attualmente usa OpenSSL per effettuare la cifratura AES-256 e AES-128. Inoltre usa la protezione Message Authentication Code (MAC), un meccanismo per assicurare che i dati non vengano manomessi dopo la cifratura.</p>

<h3>Cosa c'è nel risultato?</h3>

<p>Riprendendo l'esempio precedente, potresti pensare che la stringa cifrata</p>

<pre><code class="language-php">"eyJpdiI6ImdMd2dWcW5jMXBrUDBranRJZXQ5MEE9PSIsInZhbHVlIjoiNnhTODBSclB3ZVp3SFRRUWFWTHpReFQwYWQ1aXVmTmhXOXV5WHM2TzR1WT0iLCJtYWMiOiIwODQyZDhiMzZlNDQwZTZjYTRiYmI2MGE0MTgzNzk5NGNkZTU1Yzc5NDIyYzdjYmYwNzk2ZTA5MGNjYjc4MGYzIn0="
</code></pre>

<p>sia essa stessa la versione cifrata dell'input. Questo è senz'altro vero, ma c'è di più da sapere.</p>

<p>Essa è infatti la conversione base64 di una stringa. <em>"Che stringa?"</em> potresti chiederti... E puoi ottenere una risposta semplicemente eseguendo il seguente codice:</p>

<pre><code class="language-php">$encrypted = $encrypter-&gt;encrypt('Hello world');
$decodedEncrypted = base64_decode($encrypted);
</code></pre>

<p>il quale produce una stringa json simile alla seguente:</p>

<pre><code class="language-json">{
  "iv":"gLwgVqnc1pkP0kjtIet90A==",
  "value":"6xS80RrPweZwHTQQaVLzQxT0ad5iufNhW9uyXs6O4uY=",
  "mac":"0842d8b36e440e6ca4bbb60a41837994cde55c79422c7cbf0796e090ccb780f3"
}
</code></pre>

<p>Già... Adesso è ancora meno chiaro... Di che si tratta?</p>

<p>Questo documento json è composto dalle tre parti principali della cifratura:</p>

<ul>
<li><code>value</code>: i dati cifrati veri e propri, codificati in base64</li>
<li><code>iv</code>: l'<em>Initialization Vector</em>, una sequenza di dati di lunghezza fissa generati casualmente, iniettati ad ogni esecuzione, per prevenire attacchi basati sulla semantica, vedi (<a href="https://it.wikipedia.org/wiki/Initialization_vector">Initialization vector - Wikipedia</a> per maggiori dettagli). Anche questo è codificato in base64</li>
<li><code>mac</code>: il <em>Message Authentication Code</em>, una firma usata per identificare eventuali manomissioni del <code>value</code>, generato effettuando l'hash di <code>value</code> e <code>iv</code>. Esso è rappresentato mediante una stringa in formato esadecimale.</li>
</ul>

<p>Fai caso che sia  <code>iv</code> che <code>value</code> vanno codificati in base64 poichè sono composti da byte generici e potrebbero contenere caratteri non stampabili.</p>

<h3>Come funziona la cifratura - uno sguardo al codice</h3>

<p>Per capire come venga generato il payload json, diamo un'occhiata più da vicino al metodo <code>encrypt()</code>:</p>

<pre><code class="language-php">    public function encrypt($value, $serialize = true)
    {
        $iv = random_bytes(openssl_cipher_iv_length($this-&gt;cipher));

        $value = \openssl_encrypt(
            $serialize ? serialize($value) : $value,
            $this-&gt;cipher, $this-&gt;key, 0, $iv
        );

        if ($value === false) {
            throw new EncryptException('Could not encrypt the data.');
        }

        $mac = $this-&gt;hash($iv = base64_encode($iv), $value);

        $json = json_encode(compact('iv', 'value', 'mac'), JSON_UNESCAPED_SLASHES);

        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new EncryptException('Could not encrypt the data.');
        }

        return base64_encode($json);
    }
</code></pre>

<p>Guardando il codice, vengono realizzati 5 passi:</p>

<ol>
<li>L'Initialization Vector viene generato alla riga <code>3</code> generando 128 o 256 bit (in base al cifrario usato) di dati <em>casuali</em></li>
<li>Il valore cifrato viene generato nelle righe <code>5-8</code> eseguendo OpenSSL sulla versione (eventualmente) serializzata dei dati in chiaro, usando il cifrario, la chiave di cifratura e l'IV scelti. Nota che il risultato viene codificato in base64</li>
<li>Il MAC viene generato tramite il metodo <code>hash()</code>, a cui vanno dati in pasto l'IV base64 ed il valore cifrato. L'hashing è definito come:</li>
</ol>

<pre><code class="language-php">    protected function hash($iv, $value)
    {
        return hash_hmac('sha256', $iv.$value, $this-&gt;key);
    }    
</code></pre>

<p>cioè come l'hashing SHA256 della concatenazione dell'IV e del valore cifrato, usando la chiave di cifratura fornita.<br />
4. Un array contenente  <code>iv</code>, <code>value</code> e <code>mac</code> viene generato e convertito in formato json (riga <code>16</code>)
5. Il json viene codificato in base64 ed infine restituito (riga <code>22</code>)</p>

<h3>Come funziona la decifratura - in dettaglio</h3>

<p>Per capire come i dati originali vengano decifati, diamo un'occhiata da vicino al metodo  <code>decrypt()</code>:</p>

<pre><code class="language-php">    public function decrypt($payload, $unserialize = true)
    {
        $payload = $this-&gt;getJsonPayload($payload);

        $iv = base64_decode($payload['iv']);

        // Here we will decrypt the value. If we are able to successfully decrypt it
        // we will then unserialize it and return it out to the caller. If we are
        // unable to decrypt this value we will throw out an exception message.
        $decrypted = \openssl_decrypt(
            $payload['value'], $this-&gt;cipher, $this-&gt;key, 0, $iv
        );

        if ($decrypted === false) {
            throw new DecryptException('Could not decrypt the data.');
        }

        return $unserialize ? unserialize($decrypted) : $decrypted;
    }
</code></pre>

<p>Guardando il codice, 5 passi vengono eseguiti:</p>

<ol>
<li><p>Il payload json viene estratto alla riga <code>3</code>. Durante l'estrazione, esso viene validato verificando che:</p>

<p>1.1. Sia in forma di array<br />
1.2. Contenga i campi<code>iv</code>, <code>value</code> e <code>mac</code>.<br />
1.3. La lunghezza di <code>iv</code> sia compatibile con i requisiti del cifrario scelto<br />
1.4. Il <code>mac</code> sia valido</p></li>
<li>I dati vengono decifrati usando OpenSSL (righe <code>5-12</code>)</li>
<li>Il risultato viene (eventualmente) deserializzato e ritornato.</li>
</ol>

<h3>Perchè è sicuro?</h3>

<p>Questo schema fornisce sicurezza fin tanto che la chiave di cifratura viene mantenuta segreta. Vediamo perchè:</p>

<ul>
<li>fiducia: il messaggio in chiaro può essere decifrato solo da chi conosce la chiave segreta</li>
<li>integrità: se il valore viene modificato, la decifratura fallisce. Se iv ed il valore vengono entrambi modificati, il messaggio potrebbe essere potenzialmente decifrabile, ma la protezione MAC identificherà la manomissione e la decifratura fallirà. In ogni caso, cambiare una combinazione di iv e/o del valore e/o del MAC, farà sì che la decifratura fallisca a causa della corruzione del payload json.</li>
<li>L'unico modo per ingannare la protezione MAC è conoscendo la chiave di cifratura, che permetterebbe la forgiatura di nuovi payload cifrati validi.</li>
</ul>

<p>Se non siete ancora convinti, proviamo: crea un diverso messaggio cifrato:</p>

<pre><code class="language-php">$encrypted2 = $encrypter-&gt;encrypt('Hello hacker');
$decodedEncrypted2 = json_decode(base64_decode($encrypted2), true);
dump('DECODED ENCRYPTED 2: ');
var_dump($decodedEncrypted2);
</code></pre>

<p>Adesso, prova a manomettere uno o più dei tre valori e prova a decifrare il risultato ottenuto.</p>

<pre><code class="language-php">// scambio dei dati cifrati e tentativo di decifratura
try {
    $tampered = $decodedEncrypted;
    $tampered['value'] = $decodedEncrypted2['value'];
    $encrypter-&gt;decrypt(base64_encode(json_encode($tampered)));
} catch (\Illuminate\Contracts\Encryption\DecryptException $exception) {
    dump($exception-&gt;getMessage());
}
</code></pre>

<pre><code class="language-php">// scambio degli iv e tentativo di decifratura
try {
    $tampered = $decodedEncrypted;
    $tampered['iv'] = $decodedEncrypted2['iv'];
    $encrypter-&gt;decrypt(base64_encode(json_encode($tampered)));
} catch (\Illuminate\Contracts\Encryption\DecryptException $exception) {
    dump($exception-&gt;getMessage());
}
</code></pre>

<pre><code class="language-php">// scambio dei MAC e tentativo di decifratura
try {
    $tampered = $decodedEncrypted;
    $tampered['mac'] = $decodedEncrypted2['mac'];
    $encrypter-&gt;decrypt(base64_encode(json_encode($tampered)));
} catch (\Illuminate\Contracts\Encryption\DecryptException $exception) {
    dump($exception-&gt;getMessage());
}
</code></pre>

<p>In tutti e tre i casi, il control MAC fallisce, così come la decifratura ed una  <code>DecryptException</code> viene lanciata.</p>

<h2>Conclusione</h2>

<p>Adesso sai più in dettaglio come la cifratura di Laravel funzioni all'interno. Niente è cambiato del modo di usarla, ma hai acquisito più fiducia negli strumenti che usi. Inoltre, adesso sei in grado di giustificare con i tuoi clienti "<em>come</em>" il tuo sistema è sicuro.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Gallea</dc:creator>
                <pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/22-09-cosa-c-e-dietro-la-cifratura-decifratura-di-laravel.png"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
                    <item>
                <title><![CDATA[Laracon review & recap 2022]]></title>
                <link>https://laravel-news.it/news/22-09-laracon-review-2022</link>
                <guid isPermaLink="true">https://laravel-news.it/news/22-09-laracon-review-2022</guid>
                <description><![CDATA[Valutazione e riassunto dell'evento di riferimento della community di Laravel]]></description>
                <content:encoded><![CDATA[<p>Dopo aver visto tutto il Laracon 2022, ho scritto un piccolo riassunto di ciascun talk per mettere in risalto tutti i punti salienti.
<!-- more --></p>

<p>Ogni talk ha il link al punto esatto della conferenza e ho dato anche una mia personale valutazione ed una stima del livello di difficoltà.</p>

<p>Spero così di aiutare chi non ha il tempo di guardarlo tutto a scegliere le cose più interessanti.</p>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=874">Not Quite My Type</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Kai Sassnowski</strong></td>
  <td>★★★★★</td>
  <td>intermedio</td>
</tr>
</tbody>
</table>

<p>Talk che spiega l'utilizzo dei Value Object per riuscire a definire meglio i parametri passati alle funzioni, centralizzando il controllo e la validazione dei valori.</p>

<p>Ha portato 3 esempi in live code:</p>

<ul>
<li>durata vs int</li>
<li>percentuale vs int</li>
<li>UUID vs string</li>
</ul>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=3332">Kubernetes and Laravel</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Bosun Egberinde</strong></td>
  <td>★★★☆☆</td>
  <td>avanzato</td>
</tr>
</tbody>
</table>

<p>Panoramica di Kubernetes e un esempio pratico di utilizzo e configurazione con Laravel.</p>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=6014">The future of Livewire</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Caleb Porzio</strong></td>
  <td>★★★★★</td>
  <td>intermedio</td>
</tr>
</tbody>
</table>

<p>Ha parlato dello stato attuale dello sviluppo in internet, di Livewire e del suo futuro...</p>

<p>Ha mostrato delle anticipazioni di Livewire v3:</p>

<ul>
<li>includerà anche alpineJS di default e l'integrazione tra i due framework sarà maggiore</li>
<li>hot reload</li>
<li>ottimizzazione e riduzione delle chiamate AJAX</li>
<li>miglioramento della reattività e dell'utilizzo di componenti annidati</li>
</ul>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=9181">Sustainable Self-Care</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Marje Holmstrom-Sabo</strong></td>
  <td>★★☆☆☆</td>
  <td>base</td>
</tr>
</tbody>
</table>

<p>Ha parlato di sostenibilità, cura di se stessi sia fisica che spirituale.</p>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=10059">Let's Get Physical: Database Internals and You</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Tim Martin</strong></td>
  <td>★★★☆☆</td>
  <td>intermedio</td>
</tr>
</tbody>
</table>

<p>Ha spiegato un po' di concetti di basso livello relativi a MySQL:</p>

<ul>
<li>uso della memoria</li>
<li>performance</li>
<li>indici e alberi</li>
<li>UUID vs ID.</li>
</ul>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=10712">Deep Dive into Carbon</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Ralph J. Smith</strong></td>
  <td>★★★★☆</td>
  <td>intermedio</td>
</tr>
</tbody>
</table>

<p>Approfondimenti sulla famosa libreria di gestione delle date <code>Carbon</code>:</p>

<ul>
<li>gems: closest, farthest</li>
<li>interval: diffForHumans vs diff/diffAsCarbonInterval, CarbonInterface</li>
<li>period: le funzionalità di CarbonPeriod</li>
</ul>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=11950">UI and Component testing with Cypress</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Marcel Pociot</strong></td>
  <td>★★★★☆</td>
  <td>intermedio</td>
</tr>
</tbody>
</table>

<p>Esempio di come testare l'UI con Cypress: un componente JS per il test end2end o a componenti, 
attraverso il pacchetto <a href="https://github.com/laracasts/cypress">laracast/cypress</a> di Jeffrey Way 
e il fantastico sito demo <a href="https://laragone.net/">laragone.net</a>.</p>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=12936">The Hitchhiker's Guide to the Laravel Community</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Caneco</strong></td>
  <td>★★★☆☆</td>
  <td>base</td>
</tr>
</tbody>
</table>

<p>Piccolo resoconto storico di Laravel, di Taylor Otwell e dei servizi legati a Laravel.<br />
Ricapitolazione dello stato di salute di Laravel e delle community che ci girano attorno.</p>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=13999">Abstracting too early</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Matt Stauffer</strong></td>
  <td>★★★★☆</td>
  <td>intermedio</td>
</tr>
</tbody>
</table>

<p>Ha raccontato una storia che ha come morale: non usare strumenti grandi e complicati se non servono (YAGNI = "You Aren't Gonna Need It").<br />
Poi ha spiegato che molte volte non è necessario scrivere il migliore codice possibile, ma deve essere un compromesso in base all'uso e al team (simply design e incremental design, duplicazione &lt; astrazione sbagliata).<br />
Una volta che il progetto ha raggiunto la forma desiderata, bisogna prepararsi all'estrazione di piccole parti (un po' alla volta), rifattorizzando prima la parte interessata.</p>

<p>Poi ha portato una serie di esempi di classici errori di astrazione prematuri:</p>

<ul>
<li>Repository pattern</li>
<li>Microservices</li>
<li>Kubernetes</li>
<li>Docker</li>
<li>Estrazione di classi/componenti in librerie</li>
<li>Event sourcing</li>
</ul>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=17519">Laravel Update</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Taylor Otwell</strong></td>
  <td>★★★★☆</td>
  <td>intermedio</td>
</tr>
</tbody>
</table>

<p>Resoconto sugli ultimi aggiornamenti di Laravel, ora che il framework ha un rilascio annuale tutte le novità vengono introdotte durante i rilasci periodici, quindi si tratta semplicemente di un resoconto di novità già rilasciate e qualche cosa che verrà rilasciata a breve:</p>

<ul>
<li>laravel cli restyling</li>
<li>artisan about</li>
<li>commando db:monitor</li>
<li>comandi xxx:show</li>
<li>pint</li>
<li>controllore di uscita da un comando con <code>trap</code></li>
<li>vite preprocessor</li>
<li>allegati di <code>Mailable</code> con model che implementano l'interfaccia `Attachable</li>
<li>validazione con classi <code>InvokableRule</code></li>
<li>errori per mancanza di attributi in $fillable del Model</li>
<li>UUID, ULID</li>
<li>seeder di model con chiavi ripetute su più Model collegati con il metodo <code>recycle</code></li>
<li><code>Process</code> api</li>
<li><code>precognition</code> nuovo metodo di validazione</li>
<li><a href="https://bootcamp.laravel.com">Laravel Bootcamp</a></li>
</ul>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=21744">Database Performance for Application Developers</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Aaron Francis</strong></td>
  <td>★★★★★</td>
  <td>intermedio</td>
</tr>
</tbody>
</table>

<p>Come migliorare le performance del nostro database andando ad agire su più livelli:</p>

<ul>
<li>schema: grandezza dei tipi, tipi giusti</li>
<li>indici: b tree, indici multicolonna, ordinamento, colonne virtuali</li>
<li>query: utilizzo indici, select, subquery</li>
</ul>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=24315">Christoph Dreams of Simple Code</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Christoph Rumpel</strong></td>
  <td>★★★★☆</td>
  <td>base</td>
</tr>
</tbody>
</table>

<p>Riepiloga un po' la storia della sua vita personale e come sviluppatore, mostrando come è cambiato il suo codice negli anni ed il suo modo di pensare a proposito del codice.</p>

<p>Ha mostrato alcuni concetti per scrivere codice migliore, più leggibile, più testabile, più manutenibile e di cui andare più orgogliosi.</p>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=27069">Is there any problem Git interactive rebase can't solve?</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Rissa Jackson</strong></td>
  <td>★★★☆☆</td>
  <td>avanzato</td>
</tr>
</tbody>
</table>

<p>Una panoramica sui comandi git con preferenza per gli interactive rebase:</p>

<ul>
<li>git merge vs git  rebase</li>
<li>git drop <commit> => git rebase -i <commit></li>
<li>reword, amend</li>
<li>squash, fixup</li>
<li>rebase abort</li>
</ul>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=28126">Meaningful Mentorship</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Alex Six</strong></td>
  <td>★★★☆☆</td>
  <td>base</td>
</tr>
</tbody>
</table>

<p>Questo talk parla di cosa vuol dire essere Mentor, perché diventarlo e i vantaggi che porta.
Come creare una relazione sana tra le parti e incoraggiare i passi in avanti.
Utilizzare il pair programming per fare diventare l'allievo indipendente, definire degli obbiettivi ragionevoli e riuscire a farsi guidare da esso.</p>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=29111">I shall say… err define this only once<small></a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Freek Van der Herten</strong></td>
  <td>★★★★★</td>
  <td>intermedio</td>
</tr>
</tbody>
</table>

<p>Ha spiegato l'utilizzo del pacchetto <a href="https://spatie.be/docs/laravel-data">spatie/laravel-data</a> che permette di definire un oggetto 
una sola volta per molteplici utilizzi come form request, api resource e definizioni typescript.</p>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=30223">I can't believe it's not local!</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Chris Fidao</strong></td>
  <td>★★★★☆</td>
  <td>intermedio</td>
</tr>
</tbody>
</table>

<p>Ha spiegato come lavorare completamente remoto senza aver niente installato in locale sul computer, per non avere dipendenze o dover fare installazioni di versioni di php, mysql ecc...
In locale si usa l'editor e git e tutto il resto su un server remoto.
Ha fatto un esempio utilizzando fly.io, vessel cli e mutagen.</p>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=31139">Valid Variants of Validating Validation</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Luke Downing</strong></td>
  <td>★★★★☆</td>
  <td>base</td>
</tr>
</tbody>
</table>

<p>Ha parlato di come validare le validazioni con diversi approcci incrementali:</p>

<ul>
<li>snapshot delle regole</li>
<li>array condiviso tra i test dei casi</li>
<li>request factorty con il pacchetto <a href="https://github.com/worksome/request-factories">worksome/request-factories</a></li>
</ul>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=32271">A Grab Bag of Useful Tips</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Colin DeCarlo</strong></td>
  <td>★★★☆☆</td>
  <td>intermedio</td>
</tr>
</tbody>
</table>

<p>Ha spiegato 3 utili tip:</p>

<ul>
<li>Configurare XDebug con Valet in PHPStorm</li>
<li>Shimming Data Functions con i test in SQLite (utilizzare funzionalità di Mysql con SQLite)</li>
<li>Model Factory: come dare valori diversi alle colonne dei pivot con le <code>Sequence</code></li>
</ul>

<hr />

<h2><a href="https://youtu.be/f4QShF42c6E?t=33315">Browsers are Magical Creatures</a></h2>

<table>
<thead>
<tr>
  <th>Speaker</th>
  <th>Valutazione</th>
  <th>Livello</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>Stephen Rees-Carter</strong></td>
  <td>★★★★☆</td>
  <td>avanzato</td>
</tr>
</tbody>
</table>

<p>Ha parlato della sicurezza dei siti web attraverso la compilazione di alcuni Header (<code>X-Frame-Options</code>, <code>X-Content-Type-Options</code>, <code>Strict-Transport-Security</code>, <code>Content-Security-Policy</code>, <code>Referrer-Policy</code>, <code>Permissions-Policy</code>, <code>X-XSS-Protection</code>) e alcune modalità di attacco attraverso l'utilizzo di servizi ed esempi.</p>

<ul>
<li>Servizi per eseguire i controlli: <a href="https://securityheaders.com/">securityheaders.com</a>, <a href="https://hstspreload.org">hstspreload.org</a>.</li>
<li>Esempio di clickjacking <a href="https://portswigger.net/web-security/clickjacking/lab-basic-csrf-protected">portswigger.net</a></li>
<li>Servizio di report realtime di sicurezza <a href="https://report-uri.com/">report-uri.com</a></li>
<li>Servizio per generare l'Header <code>Permissions-Policy</code>: <a href="https://permissionspolicy.com/">permissionspolicy.com</a></li>
</ul>

<p>Poi ha spiegato il Subresource Integrity (SRI) con un esempio attraverso il codice di esempio di alpineJS ed il servizio <a href="https://www.srihash.org">srihash.org</a>.<br />
Infine ha parlato di Cross-Origin Resource Sharing (CORS) e SameSite Cookies</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alberto Peripolli</dc:creator>
                <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/22-09-laracon-review.jpg"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
                    <item>
                <title><![CDATA[Usare le code con cron in Hosting]]></title>
                <link>https://laravel-news.it/news/22-09-code-usando-cron-in-hosting</link>
                <guid isPermaLink="true">https://laravel-news.it/news/22-09-code-usando-cron-in-hosting</guid>
                <description><![CDATA[come usare le code (queue) in hosting senza supervisor]]></description>
                <content:encoded><![CDATA[<h2>Il contesto dell'hosting</h2>

<p>Quando installiamo in hosting può capitare, soprattutto con quelli a basso costo, che ci siano delle limitazioni anche importanti. Una di quelle che capita più spesso è non poter installare <strong>SUPERVISOR</strong> e quindi dover rinunciare alle code; quasi sempre però possiamo definire dei <strong>CRON</strong>. 
<!-- more -->
Il primo pensiero è quello di <strong><em>rifarsele</em></strong> in casa usando un comando, cioè di annotare le cose da fare in una tabella per poi elaborarle. Va da sè che stiamo riscrivendo delle funzionalità e questo non è un buon punto di partenza.</p>

<p>La comodità dalle code di Laravel è proprio quello di poter aggiungere un elemento a questa pila e farlo girare con comodo successivamente senza peraltro <strong>timeout</strong> che avremmo usandolo in una pagina. La soluzione in questo caso è piuttosto semplice: nei meandri della documentazione è possibile vedere che ci sono più opzioni per il demone delle code e uno di questi ci viene incontro. In pratica si tratta di far partire il demone in un <strong>CRON</strong> e farlo uscire dopo aver processato un certo numero di job.</p>

<h2>1. Configurazione</h2>

<p>Iniziamo però con ordine partendo dalla configurazione dell'env; dobbiamo indicare che le code non sono sincrone ma usando il database:</p>

<pre><code class="language-bash">QUEUE_CONNECTION=database
</code></pre>

<h2>2. Il database</h2>

<p>Per il database che sostiene le code è sempre consigliato <strong>REDIS</strong> ma in hosting spesso non è presente quindi possiamo optare per <strong>MySql</strong> che, se non abbiamo moli di calcolo grosse, può fare il suo lavoro bene. Si prosegue poi creando le tabelle per le code, laravel mette a disposizione un comando per creare la migration che verrà eseguito poi insieme anche alle altre del vostro progetto:</p>

<pre><code class="language-bash">php artisan queue:table
php artisan migrate
</code></pre>

<h2>3. Il CRON</h2>

<p>A questo punto possiamo impostare il cron nel nostro hosting in indicando al worker di uscire dopo aver processato un certo numero di elementi (<a href="https://laravel.com/docs/9.x/queues#processing-a-specified-number-of-jobs">processing-a-specified-number-of-jobs</a>):</p>

<pre><code class="language-bash">php artisan queue:work --max-jobs=10
</code></pre>

<p>Qui lo stiamo usando direttamente nel CRON ma potete tranquillamente chiamarlo nello scheduler e mettere il classico <strong>schedule:run</strong> e usarlo dal kernel del command.</p>

<pre><code class="language-php">class Kernel extends ConsoleKernel
{
    /**
     * Define the application's command schedule.
     *
     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule
     * @return void
     */
    protected function schedule(Schedule $schedule)
    {
        $schedule-&gt;command('queue:work', [ '--max-jobs' =&gt; 10 ])-&gt;everyMinute();
    }
}        
</code></pre>

<p>Il caso che mi ha fatto arrivare a questa soluzione deriva da un amico che in hosting non aveva supervisor e non poteva inviare più di 600 email l'ora; lui voleva usare le code, che oggettivamente sono molto comode, inviandone 10 per minuto auto limitava il tutto a 600.</p>

<h2>Alternative?</h2>

<p>Esiste un'alternativa a questo tipo di approccio ed è quello di lanciarlo dal kernel del command con l'opzione <strong><em>withoutOverlapping</em></strong>, questo lancerà il worker lasciandolo appeso e riavviandolo se dovesse chiudersi. Questa <strong>non è però una buona soluzione</strong> in hosting perchè lasciate un processo in memoria e se l'admin se ne accorge potrebbe intervenire sia fermando l'applicativo sia magari il dominio con un down magari in orari in cui non siete li' a monitorare (del resto avete preso un hosting proprio per non fare il sistemista no?). Poi perdete anche il controllo del processo che diviene difficile da monitorare per memory leak e altre situazioni per cui non è studiato.</p>

<pre><code class="language-php">class Kernel extends ConsoleKernel
{
    /**
     * Define the application's command schedule.
     *
     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule
     * @return void
     */
    protected function schedule(Schedule $schedule)
    {
        $schedule-&gt;command('queue:work')-&gt;withoutOverlapping()-&gt;everyMinute();
    }
}        
</code></pre>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Cappellozza</dc:creator>
                <pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/22-09-queue.png"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
                    <item>
                <title><![CDATA[Laracon 2022]]></title>
                <link>https://laravel-news.it/news/22-09-laracon-2022</link>
                <guid isPermaLink="true">https://laravel-news.it/news/22-09-laracon-2022</guid>
                <description><![CDATA[L'evento di riferimento della community di Laravel]]></description>
                <content:encoded><![CDATA[<p><a href="https://laracon.net">Laracon</a> è il più grande evento dell'anno relativo a Laravel.<br />
Si terrà il 14 Settembre in live gratuitamente su Youtube.
<!-- more --></p>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/f4QShF42c6E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3>Programmazione dell'evento</h3>

<ul>
<li>15:00 - Not Quite My Type - Kai Sassnowski</li>
<li>15:40 - Kubernetes and Laravel - Bosun Egberinde</li>
<li>16:20 - The future of Livewire - Caleb Porzio</li>
<li>17:00 - PAUSA</li>
<li>17:20 - Sustainable Self-Care - Marje Holmstrom-Sabo</li>
<li>17:35 - Let's Get Physical: Database Internals and You - Tim Martin</li>
<li>17:50 - Deep Dive into Carbon - Ralph J. Smit</li>
<li>18:05 - UI and Component testing with Cypress - Marcel Pociot</li>
<li>18:20 - The Hitchhiker's Guide to the Laravel Community - Caneco</li>
<li>18:35 - Abstracting too early - Matt Stauffer</li>
<li>19:15 - PAUSA</li>
<li>19:35 - Laravel Update - Taylor Otwell</li>
<li>20:35 - Database Performance for Application Developers - Aaron Francis</li>
<li>21:15 - Christoph Dreams of Simple Code - Christoph Rumpel</li>
<li>21:35 - PAUSA</li>
<li>22:15 - Is there any problem Git interactive rebase can't solve? - Rissa Jackson</li>
<li>22:30 - Meaningful Mentorship - Alex Six</li>
<li>22:45 - I shall say… err define this only once - Freek Van der Herten</li>
<li>23:00 - I can't believe it's not local! - Chris Fidao</li>
<li>23:15 - Valid Variants of Validating Validation - Luke Downing</li>
<li>23:30 - A Grab Bag of Useful Tips - Colin DeCarlo</li>
<li>23:45 - Browsers are Magical Creatures - Stephen Rees-Carter</li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alberto Peripolli</dc:creator>
                <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/22-09-laracon.jpg"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
                    <item>
                <title><![CDATA[I segreti del comando make:migration]]></title>
                <link>https://laravel-news.it/news/22-08-comando-make-migration</link>
                <guid isPermaLink="true">https://laravel-news.it/news/22-08-comando-make-migration</guid>
                <description><![CDATA[Il comando di Laravel per creare le migrazioni nasconde dei trucchetti interessanti.]]></description>
                <content:encoded><![CDATA[<p>Una delle operazioni più comuni in Laravel è la creazione delle migrazioni, esse ci consentono semplicemente di cambiare 
stato al nostro database.<br />
Il metodo più consono per creare una nuova migrazione è attraverso relativo comando artisan make, al quale la 
<a href="https://laravel.com/docs/9.x/migrations#generating-migrations">documentazione ufficiale</a> limita un solo paragrafo, 
pochi però sanno che nascosti nel comando base ci sono molti trucchetti che possono semplificare e velocizzare queste operazioni.</p>

<!-- more -->

<p>Il comando artisan esposto nella documentazione è il seguente:</p>

<pre><code class="language-bash">php artisan make:migration create_flights_table
</code></pre>

<p>La guida dice che esso cercherà nel nome passato i riferimenti alla tabella e se si tratta di una creazione, ma non spiega il come.</p>

<p>Per questo ho creato questa semplice guida che riepiloga tutti i trucchi.</p>

<h2>1. Passare il nome senza usare i _</h2>

<p>Nell'esempio sopra riportato il nome del file è scritto con tutti i trattini bassi che dividono le parole, ma non è molto pratico da scrivere.<br />
Per fortuna è possibile passare il nome dentro a degli apici "" utilizzando così i più comodi spazi:</p>

<pre><code class="language-bash">php artisan make:migration "create flights table"
</code></pre>

<h2>2. Creare una nuova tabella</h2>

<p>Per creare una nuova tabella dobbiamo far capire al comando che si tratta di una creazione e il nome della tabella.<br />
Possiamo quindi usare un nome specifico per la migrazione o passare opzioni aggiuntive <code>–create[=CREATE]</code> e/o <code>–table[=TABLE]</code>. 
Il comando tenterà di scoprire tali informazioni dal nome tramite un componente chiamato <code>TableGuesser</code>.</p>

<pre><code class="language-bash"># utilizzando semplicemente il TableGuesser
php artisan make:migration "create users table"

# con i parametri --table e --create
php artisan make:migration "My migration" --table=users --create

# oppure più semplicemente
php artisan make:migration "My migration" --create=users
</code></pre>

<p>Per far capire al <code>TableGuesser</code> che vogliamo creare una nuova tabella basta mettere nel nome "<strong>create</strong> nome_tabella <strong>table</strong>" oppure solamente "<strong>create</strong> nome_tabella".</p>

<p>Una volta lanciato il comando verrà creata una nuova migration con il nome <code>date_time_[nome_della_migrazione].php</code> con precompilato il codice per la creazione della tabella:</p>

<pre><code class="language-php">public function up()
{
    Schema::create('my_table', function (Blueprint $table) {
        $table-&gt;id();
        $table-&gt;timestamps();
    });
}

public function down()
{
    Schema::dropIfExists('my_table');
}
</code></pre>

<h2>3. Modificare una tabella esistente</h2>

<p>Similmente al comando per creare la tabella anche per modificare una tabella esistente abbiamo due modi per farlo capire il nome della tabella.
Anche in questo caso possiamo utilizzare un nome interpretabile dal <code>TableGuesser</code> o specificarlo con l'opzione <code>--table[=TABLE]</code>.</p>

<pre><code class="language-bash"># utilizzando semplicemente il TableGuesser
php artisan make:migration "add field to users"
php artisan make:migration remove_field_from_users_table

# con l'opzione --table
php artisan make:migration "My migration" --table=my_table
</code></pre>

<p>Per far capire al <code>TableGuesser</code> il nome della tabella ci basta scriverlo alla fine del nome e anteporlo alle preposizioni <code>to</code>, <code>from</code> o <code>in</code>.</p>

<p>Una volta lanciato il comando verrà creata una nuova migration con il nome <code>date_time_[nome_della_migrazione].php</code> con precompilato il codice per la modifica della tabella:</p>

<pre><code class="language-php">public function up()
{
    Schema::table('my_table', function (Blueprint $table) {
        //
    });
}

public function down()
{
    Schema::table('my_table', function (Blueprint $table) {
        //
    });
}
</code></pre>

<h2>4. Personalizzazione dei path</h2>

<p>Di default tutte le migrazioni verranno create nella cartella <code>database/migrations</code>, ma in molti casi (ad esempio nella DDD) potremmo essere interessati a cambiare questo percorso.</p>

<p>Per far questo possiamo usare l'opzione <code>--path[=PATH]</code>, nella quale definiamo il percorso alternativo dove creare la migrazione.<br />
Inoltre se aggiungiamo l'opzione <code>--realpath</code> il path passato al comando sarà un path assoluto (utilizzando il path base di Laravel).</p>

<pre><code class="language-bash">php artisan make:migration my_migration --path=test/folder
# Crea la migrazione in ./test/folder/date_time_my_migration.php

php artisan make:migration my_migration --path=test/folder
# Crea la migrazione in /var/www/laravel-project/test/folder/date_time_my_migration.php se laravel è nella cartella /var/www/laravel-project
</code></pre>

<p>Per completezza segnalo anche che se viene passata l'opzione <code>--fullpath</code> nel messaggio del comando artisan verrà aggiunto il path al nome.</p>

<pre><code class="language-bash"> INFO  Created migration [test/folder/2022_08_31_085751_my_migration.php]. 
</code></pre>

<h2>5. Personalizzazione degli stub</h2>

<p>Molte volte il codice di base che ci propone Laravel ci va un po' stretto... per fortuna possiamo personalizzarlo semplicemente.</p>

<p>Ci basta lanciare il comando artisan:</p>

<pre><code class="language-bash">php artisan stub:publish
</code></pre>

<p>e verranno pubblicati nella cartella <code>stubs</code> nella root del progetto tutte le basi di partenza per la creazione di file dai comandi make di Laravel artisan.
Una volta modificati verranno utilizzate queste nuove versioni dai comandi.</p>

<p>I file interessanti per le migrazioni sono:</p>

<ul>
<li><code>migration.stub</code> file vuoto:utilizzato quando il comando con capisce la tabella</li>
<li><code>migration.create.stub</code> file per la creazione di una tabella</li>
<li><code>migration.update.stub</code> file per la modifica di una tabella</li>
</ul>

<p>TIP: Se siete a corto di idee potete utilizzare il <a href="https://github.com/spatie/laravel-stubs">pacchetto di spatie <code>spatie/laravel-stubs</code></a>, che contiene le personalizzazioni opinionate degli stub di Laravel. 
In questo caso ad esempio hanno completamente rimosso le funzioni di rollback delle migrazioni.</p>

<h2>6. Creazione del modello insieme alla migrazione</h2>

<p>Nel caso volessimo creare anche un nuovo Model insieme alla migrazione, possiamo ricorrere al comando artisan <code>make:model</code>.</p>

<p>Questo comando crea un nuovo Model ma passando l'opzione <code>-m</code> o <code>--migration</code> crea anche la migrazione di creazione tabella.</p>

<pre><code class="language-bash">php artisan make:model Flight --migration
# questo comando creerà il model in app/Models/Flight.php 
# ed anche la migrazione in database/migrations/date_time_create_flights_table.php
</code></pre>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alberto Peripolli</dc:creator>
                <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/22-08-comando-make-migration.png"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
                    <item>
                <title><![CDATA[L'inizializzazione proibita]]></title>
                <link>https://laravel-news.it/news/22-07-inizializzazione-proibita</link>
                <guid isPermaLink="true">https://laravel-news.it/news/22-07-inizializzazione-proibita</guid>
                <description><![CDATA[Come inizializzare gli argomenti di una funzione.]]></description>
                <content:encoded><![CDATA[<p>In PHP è possibile dare un valore di default ai parametri di una funzione.<br />
Questo serve a evitare di passare parametri che restano molto spesso invariati e che quindi non si vuole esplicitare a ogni invocazione.</p>

<pre><code class="language-php">function makecoffee($type = "cappuccino")
{
    return "Making a cup of $type.\n";
}
echo makecoffee(); // Making a cup of cappuccino.
echo makecoffee(null); // Making a cup of .
echo makecoffee("espresso"); // Making a cup of espresso.
</code></pre>

<p>Il problema è che con PHP possiamo assegnare ai parametri solo dei valori semplici come una stringa, un numero, <code>null</code> o un <code>array</code> di elementi semplici.</p>

<p>Molto spesso però capita di volere assegnare un oggetto o addirittura il risultato di una funzione.</p>

<pre><code class="language-php">function printDate(Carbon $date = now())
{
    return $date-&gt;format('d/m/Y');
}
</code></pre>

<p>Purtroppo questa sintassi ritorna l'errore: <code>Fatal error: Constant expression contains invalid operations</code>.</p>

<p>Quindi l'unica soluzione è inizializzare il parametro a <code>null</code> e poi andarlo a definire dentro la funzione.</p>

<pre><code class="language-php">function printDate(?Carbon $date = null)
{
    if(is_null($date)){
        $date = now();
    }

    return $date-&gt;format('d/m/Y');
}
</code></pre>

<p>Anche se questa sintassi può sembrare pulita, all'aumentare dei parametri può diventare molto prolissa.</p>

<p>Per fortuna da PHP 7.4 abbiamo un nuovo operatore di assegnazione chiamato <code>Null Coalesce</code> che rende il codice più coinciso e meglio leggibile:</p>

<pre><code class="language-php">function printDate(?Carbon $date = null)
{
    $date ??= now();

    return $date-&gt;format('d/m/Y');
}
</code></pre>

<p>Questo compatto operatore è l'evoluzione dell'operatore ternario di PHP</p>

<pre><code class="language-php">// before PHP 7
$data['username'] = (isset($data['username']) ? $data['username'] : 'guest');
// before PHP 7.4
$data['username'] = $data['username'] ?? 'guest';
// after PHP 7.4
$data['username'] ??= 'guest';
</code></pre>

<p>Quindi la prossima volta che vi servirà d'inizializzare un parametro di una funzione ricordatevi questo piccolo amico <code>??=</code>.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alberto Peripolli</dc:creator>
                <pubDate>Fri, 15 Jul 2022 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/22-07-inizializzazione-proibita.png"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
                    <item>
                <title><![CDATA[Creare un nuovo articolo]]></title>
                <link>https://laravel-news.it/news/creare-un-nuovo-articolo</link>
                <guid isPermaLink="true">https://laravel-news.it/news/creare-un-nuovo-articolo</guid>
                <description><![CDATA[Creare un nuovo articolo per il blog di laravel news italia]]></description>
                <content:encoded><![CDATA[<p>Il sistema crea articoli usando file in formato MD quindi per elaborarlo si procede molto semplicemente come segue usando git, quindi molto dev friendly.
Ricordate che il nome del file rappresenterà anche l'url dell'articolo, quindi scrivetelo in modo chiaro e completo.</p>

<pre><code class="language-bash">git clone https://github.com/laravel-news-it/laravel-news.it.git

cd laravel-news.it/source/_posts

touch nuovo-articolo.md

vi nuovo-articolo.md
</code></pre>

<p>Il nome del file deve essere composto da [ANNO]-[MESE]-titolo in formato slug es: <code>22-12-titolo.md</code></p>

<p>Nella parte iniziale del file vanno messi i metadati dell'articolo in questa maniera:</p>

<pre><code>---
extends: _layouts.post
section: content
title: Creare un nuovo articolo
date: 2022-06-03
description: Creare un nuovo articolo per il blog di Laravel News Italia
categories: [news]
cover_image: /assets/articles/22-07-nome-del-file.png
author: Alessandro Cappellozza
---
</code></pre>

<p>Le prime parti sono i layout e quelle non vanno toccate, parlo di extends e section. Le rimanenti hanno questi significati:</p>

<table>
<thead>
<tr>
  <th>Header</th>
  <th>Descrizione</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>title</strong></td>
  <td>Titolo dell'articolo.</td>
</tr>
<tr>
  <td><strong>date</strong></td>
  <td>Data in formato ISO</td>
</tr>
<tr>
  <td><strong>description</strong></td>
  <td>Descrizione completa dell'articolo.</td>
</tr>
<tr>
  <td><strong>categories</strong></td>
  <td>Questi sono i tag che potete inserire, se ne possono inserire anche più di uno [events, contents, news, packages, php, tips, tutorials].</td>
</tr>
<tr>
  <td><strong>cover_image</strong></td>
  <td>L'immagine di copertina è molto importante per dare un contesto visivo all'articolo. Il rapporto deve essere 3:1 es 1200x400px.</td>
</tr>
<tr>
  <td><strong>author</strong></td>
  <td>Il vostro nome e cognome.</td>
</tr>
<tr>
  <td><strong>excerpt</strong></td>
  <td>è opzionale, serve per descrivere meglio il riassunto dell'articolo nel caso non vogliate che lo faccia il sistema automaticamente.</td>
</tr>
</tbody>
</table>

<p>Nell'esempio è utilizzato vim ma potete utilizzare qualsiasi altro editor, le immagini invece potete aggiungerle fisicamente a in questa cartella:</p>

<pre><code class="language-bash">cd source/assets/articles/
</code></pre>

<p>Preferibilmente mettete file ben compressi o vettoriali; in caso abbiate piu' di un file è meglio fare una cartella col nome dell'articolo.<br />
Se vi servono immagini con codice sorgente potete usare questo servizio online: <a href="https://10015.io/tools/code-to-image-converter">10015</a>.</p>

<p>Potete inserire parti di codice con questa sintassi:</p>

<pre><code class="language-markdown"> ```linguaggio
  codice
 ```
</code></pre>

<p>I linguaggi supportati sono: <code>bash</code>, <code>css</code>, <code>html</code>, <code>javascript</code>, <code>json</code>, <code>markdown</code>, <code>php</code>, <code>scss</code>, <code>yaml</code>.<br />
Potete comunque prendere spunto dagli articoli già scritti.</p>

<p>Per fare una preview del vostro articolo potete lanciare il sito in modalità di debug in questa maniera.</p>

<pre><code class="language-bash"># Necessario solo se è la prima volta che si avvia
composer install
npm install

# Lancio in modalità debug
npm run watch
</code></pre>

<p>Per la richiesta di pubblicazione potete procedere con una pull request verso il repository origine.</p>

<p>Potete creare quindi un nuovo branch con
<code>git checkout -b nuovo-articolo</code><br />
e poi effettuare la <strong><em>pull-request</em></strong>.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Cappellozza</dc:creator>
                <pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/creare-un-nuovo-articolo.png"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
                    <item>
                <title><![CDATA[Laravel Day 2021]]></title>
                <link>https://laravel-news.it/news/laravel-day-2021</link>
                <guid isPermaLink="true">https://laravel-news.it/news/laravel-day-2021</guid>
                <description><![CDATA[Riepilogo dell'evento Laravel Day 2021]]></description>
                <content:encoded><![CDATA[<p><a href="https://2021.laravelday.it/">Sito ufficiale</a></p>

<h4>Papà, come nascono i Service Container?</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/HyOnd8wSBFg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Sin da subito, chi si approccia all'utilizzo di Laravel o altri framework, impara ad utilizzare le sue funzionalità di Service Container. Ma cos'è esattamente e com'è fatto un Service Container? Scoprire come realizzarne uno è il miglior modo per imparare ad usarlo al meglio ed in modo consapevole.</p>

<hr />

<h4>Pillole digeribili di sicurezza</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/ku7ONFkBkro" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Buone pratiche, package, idee e suggerimenti per mettere in sicurezza il proprio applicativo a livello strutturale e cercare di dormire più tranquilli.</p>

<hr />

<h4>CI/CD, the Jobtech way</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/1l_0n34OEG0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Il mio case study prende spunto dalla vita di tutti i giorni di noi backend developer in Jobtech. A partire dall'ambiente di sviluppo locale fino al deploy in produzione del codice delle nostre 4 applicazioni core.
Filippo Galante</p>

<hr />

<h4>Blade Deep Dive</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/rGQ2AJE2ixM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Come funziona Laravel Blade? Vediamo come sfruttare al massimo le sue potenzialità</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Cappellozza</dc:creator>
                <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/laravel-day.png"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
                    <item>
                <title><![CDATA[Laravel Day 2020]]></title>
                <link>https://laravel-news.it/news/laravel-day-2020</link>
                <guid isPermaLink="true">https://laravel-news.it/news/laravel-day-2020</guid>
                <description><![CDATA[Riepilogo dell'evento Laravel Day 2020]]></description>
                <content:encoded><![CDATA[<p><a href="https://2020.laravelday.it/">Sito ufficiale</a></p>

<h4>Come ho sviluppato e scalato un prodotto SaaS grazie a Laravel</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/AgRCg10PIEw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>In questo talk mostrerò tutte le strategie di sviluppo che ho utilizzato per implementare e scalare un prodotto SaaS utilizzando Laravel per la gestione di grandi quantità di traffico. Partendo dall'evoluzione del codice vedremo come ho configurato l'ambiente di sviluppo, l'integrazione con sistemi esterni attraverso i driver, l'uso massivo del sistema Queue/Jobs e l'impatto sul Database, fino alla parte più infrastrutturale con la suddivisione dell'applicazione su più server specializzati e il deploy.</p>

<hr />

<h4>LiveWire Hands-on, frontend moderno senza toccare una riga di javascript</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/Q-pmLL_zkuE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Sappiamo tutti che per avere un frontend al passo coi tempi è necessario fare spesso due progetti uno di frontend e uno backend distinti e specializzati, complicando sia lo sviluppo che il deploy delle applicazioni. Questo nuovo strumento si prefigge di colmare questo gap consentendo di creare componenti "ajax" con il solo PHP; una strada già battuta da altri linguaggi ma con un approccio nuovo già usato da grossi portali, qui lo vedremo pacchettizzato e standardizzato per Laravel. Analizzeremo il principio di funzionamento, cosa mette a disposizione di base, un esempio pratico e dei contesti dove può effettivamente essere utile.</p>

<p><a href="https://slides.com/eppak/livewire-hands-on-frontend-moderno-senza-toccare-una-riga-di-javascript">slide</a></p>

<hr />

<h4>How can I trust my test suite?</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/-I10fHpy14Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>You just started working on a new project. Or maybe you've been working on it since some time, and it evolved a lot, thanks to many different developers. This means that you probably don't have enough knowledge on how the automated tests are written, and how effective they are. So, how can you be confident to ship new features in production, or to refactor that old piece of software that's slowing you down? Are you fairly sure that if your CI build is green you're not gonna break anything? There are a lot of tools out there that give you some numbers about your code and your tests, like code coverage and CRAP metrics, but they are significant up to some extent. In this talk, we will see how can you measure the effectiveness of your test suite, how you can actually improve it, and what are the benefits of having a reliable and comprehensive set of automated tests.</p>

<hr />

<h4>Applicazioni "Modulitiche"</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/TAszZm0m6ME" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>In certi contesti un'applicazione non si presta ad essere racchiusa in un unico pacchetto monolitico, ma non è nemmeno sufficientemente distribuita da essere realizzata mediante un'architettura a servizi. Il paradigma “modulitico” è una soluzione ibrida intermedia fra questi due estremi. Questo approccio, oltre a risolvere problemi di gestione del progetto, richiede l'osservanza e l'applicazione di alcuni concetti fondamentali di Clean code and architecture, elevando il livello di qualità della codebase. Scopriremo quando e perché questa metodologia è uno strumento potente se usato in modo corretto.</p>

<p><a href="https://docs.google.com/presentation/d/1pm2uaq6wLV4onWq6zuKAC71EOjA0mO4dxFuxpEwOlps">slide</a> <a href="https://github.com/robertogallea/applicazioni-modulitiche">sorgenti</a></p>

<hr />

<h4>Multi-tenancy in Laravel</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/ftYFX8SYLE4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Il multi-tenancy è la principale modalità per creare delle SaaS. Analizzeremo cos'è, i pacchetti più noti e creeremo un applicativo di test utilizzando il pacchetto "stancl/tenancy".</p>

<hr />

<h4>Laravel Authentication Deep Dive</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/l1L1xEAslqs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Facciamo un tuffo nel sistema di autenticazione utenti di Laravel: vedremo nel dettaglio cosa sono le Guard e gli UserProvider, analizzeremo sessioni e token e useremo queste informazioni per creare il nostro sistema di autenticazione</p>

<hr />

<h4>Organizzazione del codice su Laravel</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/_qtwTjTi6Q0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>In questo talk andremo a vedere le tecniche che il team di Playmoove utilizza per tenere organizzata e accessibile la codebase, nello specifico: - Scrittura di API controller - Business logic isolation - Dependency injection - Generazione automagica delle API docs</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Cappellozza</dc:creator>
                <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/laravel-day.png"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
                    <item>
                <title><![CDATA[Laravel Day 2019]]></title>
                <link>https://laravel-news.it/news/laravel-day-2019</link>
                <guid isPermaLink="true">https://laravel-news.it/news/laravel-day-2019</guid>
                <description><![CDATA[Riepilogo dell'evento Laravel Day 2019]]></description>
                <content:encoded><![CDATA[<p><a href="https://2019.laravelday.it/">Sito ufficiale</a></p>

<h4>Laravel the Lego™ Way</h4>

<iframe width="100%" height="480" src="https://www.youtube.com/embed/pgxJFOHqLxU" class="rounded border border-gray-400 shadow" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Affiancare a Laravel uno strumento RAD come un admin package è una tentazione forte che però ha un costo in termini di scalabilità, architettura e a volte debito tecnico. Ci si trova quindi ad assemblare un software come se si avessero in mano dei mattoncini per l'appunto, cercando quelli che si incastrano meglio per forma e colore alle specifiche e desideri del committente. Lo sviluppo i trasforma in un incastro di funzionalità che spesso ci travolge e ci lascia col dubbio di aver fatto la scelta migliore. Cercheremo di trovare un trade off facendo una carrellata sugli strumenti che offre il mercato valutandone pro/contro e cercando di capire come impattano non solo sul codice ma sul rapporto qualità e time to market.</p>

<p><a href="https://docs.google.com/presentation/d/11dqSyCNc5rxZwrWGGaVaXHCj5Q1iH35lV8IepqruPmE">slide</a> <a href="https://github.com/eppak/legolaravelway">sorgenti</a></p>

<hr />

<h4>Laravel applicato alle piattaforme e-commerce cloud</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/I2-1Ef1moPU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Ad oggi il mondo e-commerce si sta muovendo verso le tecnologie cloud, mentre il mondo dei gestionali ancora non si evolve o a volte non è in grado di supportare in modo completo i clienti nell'approccio a queste piattaforme. In questo talk andremo a vedere come realizzare e configurare a grandi linee un'app middleware realizzata in Laravel (Migrations, Commands, Services, Controllers, ....) che attraverso l'utilizzo delle api fornite dalla piattaforma Cloud possa comunicare con un gestionale attraverso l'interscambio di file.</p>

<p><a href="https://drive.google.com/file/d/1T3iB7W99RIQiEGqtAvCJSS0oNp68hbts/view">slide</a></p>

<hr />

<h4>Controllers, Policies e richieste asincrone</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/aMd3PUPnNyE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Le policy di Laravel sono il miglior strumento a disposizione di uno sviluppatore per poter garantire agli end user una precisa politica di autorizzazione all'accesso e modifica delle risorse. Obiettivo del talk è di dare una panoramica a tutto tondo sull'utilizzo di questo strumento all'interno di un progetto Laravel 6.0, con un focus sulla magia compiuta dal framework dietro le quinte. Per rendere il tutto più interessante, si entrerà nel dettaglio di una Single Page App esemplificativa e di come le richieste asincrone generate tramite il client HTTP axios debbano gestire correttamente i response inviati dai controller successivamente alla verifica di una o più policy.</p>

<p><a href="https://docs.google.com/presentation/d/1gYMSpEYvR3q7kR2YeeBPYz0Iy5C7yg9ifoEhEYmaybA/">slide</a></p>

<hr />

<h4>MongoDB vs MySQL in applicazioni Laravel</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/J4GDCAo4muU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>In questi ultimi anni i database di tipo non relazionale, pur non essendo una novità assoluta, hanno registrato una crescita esponenziale nel loro sviluppo ed utilizzo grazie al sempre più crescente bisogno di scalare in orizzontale superando i limiti ai classici RDBMS (database relazionali). In questo talk metteremo a confronto i maggiori database relazionali e non, analizzandone i pro ed i contro. Inoltre vedremo come implementare da zero una applicazione CRUD in Laravel con MongoDB e MySQL, come viene influenzato il design dell’applicazione e come varia il carico di lavoro con un database rispetto all’altro.</p>

<p><a href="https://drive.google.com/file/d/1ZZ1tqOTWjdT5MZwbfP5o2_gBIP3n1ynG">slide</a> <a href="https://github.com/offline-agency/laravel-mongodb-blog">sorgenti</a></p>

<hr />

<h4>Service Container Deep Dive</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/fwwfFVqO5gg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Laravel non è solo un framework per lo sviluppo di applicazioni web moderne, ma al suo interno nasconde (neanche troppo) un vero e proprio "service container". Nel talk analizzeremo cosa è un service container, perché lo usiamo senza nemmeno accorgercene, come lo possiamo sfruttare per favorire il disaccoppiamento del codice e cosa si nasconde dietro il concetto di Facade.</p>

<p><a href="https://drive.google.com/file/d/1OzdqiKLicncYHgW5HT1npd7YATSiTvJc">slide</a></p>

<hr />

<h4>Laravel Notification System 201</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/eSpvul53B3Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Sebbene Laravel non consenta in prima istanza l'invio di messaggi differenti dalle email, questo non preclude l'estrema versatilità del modulo di notifiche, quest'ultimo consente infatti di inviare anche SMS, chiamate e notifiche push se opportunamente configurato. Obiettivo di questo talk è proprio quello di analizzare il funzionamento del modulo e di tutti gli accorgimenti utili alla sua estensione e al suo utilizzo al massimo potenziale.</p>

<hr />

<h4>Test Driven Development con Laravel</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/UALxTYn6tB4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Testare correttamente il proprio codice è una necessità imprescindibile per realizzare software robusto, pulito e di qualità. Il Test Driven Development è la principale metodologia di riferimento per la definizione di test-suite automatizzate. Il talk descrive le motivazioni, i concetti ed i principi fondamentali di questa disciplina. Tali elementi verranno applicati ad un caso d'uso, e, utilizzando Laravel e PHPUnit, saranno affrontati i concetti di Feature ed Unit testing, l'uso delle asserzioni, l'Integration testing ed il mocking.</p>

<p><a href="https://github.com/robertogallea/laravelday-tdd">sorgenti</a> <a href="https://github.com/robertogallea/laravelday-tdd/blob/master/tdd.pdf">slide</a></p>

<hr />

<h4>Creazione di package Laravel</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/0SJn6Tl-i7Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Il talk descrive il ciclo di creazione e manutenzione di un package Laravel da utilizzare con composer. In particolare verranno descritte le seguenti fasi: Definizione del package e delle sue funzionalità; Pubblicazione di configurazioni, assets ed altri componenti; Pubblicazione su GitHub; Pubblicazione su packagist; Automazione dell'aggiornamento su packagist in seguito ad un push; Gestione delle versioni. Al fine di comprendere meglio i contenuti, si consiglia la conoscenza base di Laravel, composer e git.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Cappellozza</dc:creator>
                <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/laravel-day.png"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
                    <item>
                <title><![CDATA[Laravel Day 2018]]></title>
                <link>https://laravel-news.it/news/laravel-day-2018</link>
                <guid isPermaLink="true">https://laravel-news.it/news/laravel-day-2018</guid>
                <description><![CDATA[Riepilogo dell'evento Laravel Day 2018]]></description>
                <content:encoded><![CDATA[<p><a href="https://2018.laravelday.it/">Sito ufficiale</a></p>

<h4>Laravel applicato all'IIOT</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/YEkmK09QulU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Il percorso che ho fatto negli ultimi due anni mi ha portato ad avvicinare il settore del web, dal quale provengo, al settore dell'IIOT. Grazie alla sua duttilità Laravel ha consentito a me e alla mia azienda di creare un prodotto industriale competitivo e completo in tempi brevi e di continuare a supportarlo riducendo tempi e costi. Questo appliance hardware si occupa della collezione, monitoraggio e analisi di dati provenienti da dispositivi telemetrici industriali usati nei più svariati ambiti del telecontrollo. La flessibilità e la completezza di Laravel ha permesso di risolvere molti problemi rapidamente e in maniera pulita facendo da collante alle tecnologie che ruotavano intorno al progetto, questo è quello che di cui voglio raccontarvi nel mio talk.</p>

<p><a href="https://slides.com/eppak/lday2018-laravel-iiot">Slide del talk</a></p>

<hr />

<h4>Modern PHP development with Laravel 5.6</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/AqFtr60vytU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>In soli 5 anni il mondo PHP si è rivoluzionato completamente. Prima di allora veniva considerato un semplice linguaggio di scripting per siti web di piccole dimensioni. Ora ha guadagnato a tutti gli effetti lo status di linguaggio di programmazione per professionisti da utilizzare all’interno di contesti Enterprise. Tutto nacque grazie a Composer ed il suo gestore delle dipendenze. Da quel momento in poi la community ha potuto condividere librerie open source con una facilità mai vista prima, creando un campo fertile e dando spazio all’innovazione. Tra i principali utilizzatori delle novità introdotte vi è sicuramente Laravel, il framework backend con piu star su GitHub e tutt’ora in fortissima crescita. In questo talk faremo un overview sulle principali metodologie di sviluppo moderne. Si passerà dal TDD al Continuous Integration, continuando per Clean Code, Object Calisthenics, principi di Domain Driven Design ed Architettura Esagonale.</p>

<p><a href="https://slides.com/damianopetrungaro/modern-laravel-talk">Slide del talk</a></p>

<hr />

<h4>The Kubernetes hitchhiker's guide to the CI/CD</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/O1kem6cym-c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Sei dunque riuscito a creare un ambiente produttivo per lo sviluppo locale adottando la metodologia 12 Factor, la tua applicazione è correttamente ""containerizzata"" e padroneggi Docker: ottimo, ora è tempo di fare il passo in avanti ed ottenere Continuous Integration, Continuous Delivery e Continuous Deployment... SI - PUÒ - FARE! (cit. Frankenstein Junior) Kubernetes è diventato lo standard de-facto per l'orchestrazione di container: questo talk sarà una demo live inerente il life-cycle di un ecosistema Laravel e di come Kubernetes possa essere la tecnologia chiave per diminuire il lead-time oltre che i costi infrastrutturali.</p>

<p><a href="https://slides.com/dariotranchitella/laravelday-2018">Slide del talk</a></p>

<hr />

<h4>Sviluppare API con Laravel e Serverless su AWS</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/YvHGsKuM7ns" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Una della più grandi innovazioni legate al cloud computing è sicuramente rappresentato dall'ecosistema Serverless cui negli ultimi anni abbiamo assistito a una grande diffusione di questo paradigma di sviluppo. Il serverless è un ecosistema di servizi e metodi di progettazione dai confini molto ampi e che necessita di un certo spirito critico per essere inquadrato nel modo giusto e impiegato nei propri progetti. Nel caso di un'applicazione Laravel su Serverless in ambiente AWS occorre adottare qualche accorgimento e configurazione per utilizzarne a pieno i vantaggi. In questo talk vedremo come sviluppare un API REST completa di feature come autenticazione JWT, rate-limit, cache e best practice e vederla girare su un ambiente AWS Serverless; si affronterà anche come monitorarne il funzionamento, progettare ed effettuare i test, per avere API sempre "up &amp; running"</p>

<p><a href="https://docs.google.com/presentation/d/e/2PACX-1vT6UZEEdQAie3dt2h4NoZuK-PxRst8XmSsVd5j2QlmMGYW_kI03ndYBQLJoGUZrcyQ29jf03aXj0-uc/pub?start=false&amp;loop=false&amp;delayms=3000#slide=id.g48a9a83844_2_45">Slide del talk</a></p>

<hr />

<h4>Laravel e Vue JS</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/zunRHtpisDY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Vue.js è una framework per realizzare applicazioni web interattive; l'obiettivo di Vue.js è fornire i benefici del reactive data binding e del composable view components attraverso un'API il più possibile semplice. Purtroppo, data la grande flessibilità, ci si trova ad un bivio per capire cosa fare lato frontend, sia lato backend, creando a volte applicazioni difficili sotto il profilo della manutenzione. In questo talk vedremo come l'accoppiata Laravel e Vue JS ci torna utile per la creazione di Single Page Application e Progressive Web Application, in modo rapido e affidabile, toccando gli aspetti progettuali, implementativi e di deploy.</p>

<p><a href="https://docs.google.com/presentation/d/e/2PACX-1vQWJ0Ac0IFV-goQxunm8gCHauAC-M-wCtI_YsMuKZ9fftw7im5jdW0HuR_aQYFz_yT_j9Z9pvMjfB2b/pub?start=false&amp;loop=false&amp;delayms=3000#slide=id.g48a98c831d_2_45">Slide del talk</a></p>

<hr />

<h4>Flexible Laravel: come rendere meno traumatica la gestione di un sistema legacy</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/mtGvpxYTYPQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Sappiamo tutti quanto sia importante sviluppare codice pulito, di facile e comprensione e ben strutturato. Spesso però siamo costretti a fare i conti con la scomoda eredità di un’architettura preesistente, sviluppata senza tenere in considerazione anche le più basilari best-practice o martoriata da deadline stringenti e, più banalmente, dagli inevitabili segni del tempo. Recentemente ho avuto la (s)fortuna di lavorare ad un progetto di grandi dimensioni senza la possibilità modificare neanche una virgola del suo vecchio e malandato database, ma grazie all’utilizzo di Laravel e del nostro caro Eloquent, rimettere il tutto in carreggiata è stato meno difficile del previsto. In questo talk cercherò di sviscerare alcuni dei passaggi chiave di questa profittevole transizione: sebbene Laravel aderisca al paradigma “convention over configuration” per semplificare al massimo la nostra vita e aumentare la produttività, può dimostrarsi un alleato molto flessibile anche fuori dalla sua naturale "comfort zone".</p>

<p><a href="https://slides.com/matteomangoni/flexible-laravel">Slide del talk</a></p>

<hr />

<h4>Deploying Laravel from dev to production</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/JYmhIpXuyR8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Scrivere un buon software costituisce solo una parte del lavoro necessario per far sì che questo possa essere proficuamente utilizzato dal pubblico. In questa sessione sarà fatta una panoramica di quelle che sono le soluzioni più comuni per il rilascio in di applicazioni laravel in ambienti locali, self-hosted, PaaS e IaaS comparandoli tra loro al fine di comprendere perchè in alcune situazioni alcune soluzioni siano preferibili alle altre. Particolare attenzione verrà data all'ambiente di sviluppo al fine di ottenere un ambiente il più possibile production-like ed evitare il presentarsi di alcuni tra i problemi più comuni.</p>

<hr />

<h4>Docker for PHP Developers</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/x5mDjUkHiGw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Parleremo di come configurare e utilizzare Docker in un progetto Laravel per uno sviluppatore che si inserisce in un nuovo Team per la prima volta. Prenderemo come esempio alcuni progetti già pre-costituiti come Laravel Homestead e Laradock fino ad arrivare ad a costruire un ambiente docker più strutturato con Laravel, Redis, Memcached, Laravel Echo Server per avere un ambiente facilmente deployable sul cloud.</p>

<p><a href="https://www.slideshare.net/skyweb/laravelday2018">Slide del talk</a></p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Cappellozza</dc:creator>
                <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/laravel-day.png"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
                    <item>
                <title><![CDATA[Laravel Day 2017]]></title>
                <link>https://laravel-news.it/news/laravel-day-2017</link>
                <guid isPermaLink="true">https://laravel-news.it/news/laravel-day-2017</guid>
                <description><![CDATA[Riepilogo dell'evento Laravel Day 2017]]></description>
                <content:encoded><![CDATA[<p><a href="https://2017.laravelday.it/">Sito ufficiale</a></p>

<h4>RESTful API: la novità in Laravel 5.5</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/xi8AguAjuUk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Laravel 5.5 ha aggiunto alcune cose per aiutarci a creare più velocemente la basi di un API restful. Per esempio, adesso i transformer sono stati integrati, quindi non c'è più bisogno di includere Fractal. Questa talk parlerà degli step necessari per creare un'API RESTful semplice partendo da zero, usando la varie novità.</p>

<hr />

<h4>12 Factors Laravel</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/iAe6BK8XBzM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>"It works on my machine: è la frase che tutti noi abbiamo usato o che ci siamo sentiti dire almeno una volta nella vita, in combinazione a "non possiamo scalare orizzontalmente". Con l'ausilio a Docker è possibile rendere un'applicazione Laravel altamente scalabile nel cloud: grazie agli adapter offerti per la gestione della base dati, della cache, delle sessioni e delle code è possibile adottare i principi dettati dal manifesto '12 factors app', seguendo dunque le best practices di DevOps per creare un ambiente ottimizzato a qualsiasi environment con pochi comandi."</p>

<hr />

<h4>Laravel Doctrine: a Data Mapper approach</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/7aeArtHwfCA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>"Eloquent è uno strumento potentissimo: permette di velocizzare, e di molto, lo sviluppo di applicazioni web offrendoti un’interfaccia molto chiara e intuitiva. Per la prototipazione rapida è il massimo. Tuttavia, non appena l’applicazione cresce di dimensione, la situazione rischia di esploderci in mano in quanto Eloquent soffre di tutti i limiti di un Active Record. Un’alternativa a questo pattern è il Data Mapper, implementato in maniera eccellente da Doctrine. In questo talk vedremo quindi come integrare Doctrine all'interno di Laravel e verrà dato qualche spunto su come strutturare un’architettura molto più solida."</p>

<hr />

<h4>Codemotion, Laravel &amp; me: 3 anni in un'azienda in rapida crescita</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/MSymm3-K_nU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>"Tre anni fa è iniziato lo sviluppo di tool per la gestione delle conferenze di Codemotion, dall’esigenza naturale di automatizzare alcuni processi che fino a quel momento erano gestiti manualmente. Data la presenza di uno stack LAMP per i siti web degli eventi, la scelta tecnologica è caduta su Laravel, tra i framework php più in voga al momento. Questi strumenti di supporto sono diventati nel frattempo dei veri e propri progetti, chiamati a rispondere alle continue e nuove necessità dell’azienda che continua a crescere e ad espandersi, diventando un importante punto di riferimento per i developers in Europa. Il talk vuole ripercorrere questa evoluzione, dal punto di vista dello sviluppatore che ha iniziato a sviluppare su un framework da zero, mostrando alcune delle sfide che si sono presentate e come sono state affrontate con Laravel."</p>

<hr />

<h4>Playmoove: Shared mobility within everyone's reach (developers included)</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/Qto4Nzjsmtc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>"Understanding the tools we use every day it’s a critical component of building good software in a reasonable amount of time. But tools are not enough when software grows, in this talk I am condensing my experience with laravel to help you bootstrap and be really productive on your next project. In this talk we will introduce how we built Playmoove to be as simple as possible for the final customer and extremely extensible and revisionable for the developers. We will (almost) deep dive into the top things that have enhanced our developing experience: - From writing better controllers with eloquent automatic model binding and Abstract requests with the FormRequest, to Enhance application response time using queues to balance and delegate the load and eloquent eager loading, up to Improve maintainability and inspectability with Abstract models on API layers, ‎Log exception to track down problems and exception rendering to give end user coherent error messages"</p>

<hr />

<h4>Using Repository Pattern with Eloquent for Code That Lasts</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/NgHsl9dpIao" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>"Laravel è un framework moderno e davvero potente sotto moltissimi punti di vista, componenti semplici da utilizzare ed estendere sono la chiave del suo successo. Tra questi brilla l'ORM Eloquent che riesce a darci un'ottima astrazione per manipolare velocemente i modelli e la loro persistenza. Quando però entrano in gioco logiche di dominio particolarmente complesse o si necessità di più controllo e di una forte elasticità per mappare i dati a nostro piacimento, Eloquent comincia a remarci contro e non essere più un fedele alleato. Scopriamo come continuare ad utilizzare Eloquent rendendo il nostro codice più pulito e disaccoppiato dalla sua dipendenza, senza però perderne i numerosi vantaggi e l'incredibile immediatezza d'utilizzo."</p>

<hr />

<h4>Designing Virtual Reality App with Laravel Integration</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/3RaYDC7A0KE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>"Nowaday, Laravel is used in an increasing number of web applications, platforms, mobile applications and web services. However, Laravel can be a great solution to implementing RESTful APIs for content management within a virtual reality application. After a short introduction, we will implement a basic VR application that uses Laravel and the recent API Resources as source for data display. Finally, we will show Coderblock as case study for Laravel integration into an online 3D VR office."</p>

<hr />

<h4>Deploy di applicazioni Laravel con le pipeline di Bitbucket</h4>

<iframe width="100%" height="480" class="rounded border border-gray-400 shadow" src="https://www.youtube.com/embed/J3ySFHXIFZk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>"Da sempre fare il deploy di applicazioni multi-istanza rappresenta una sfida per lo sviluppatore e per il sistemista. Oggi grazie a strumenti gratuiti e un pò di esperienza in materia è possibile eseguire tale operazione lavorando su pipeline che prevedono testing automatico, validazione del code style e molto altro, in modo da ottenere una Continuous Integration consistente, efficace ed in tempi brevissimi. Scopriamo insieme come con un progetto Laravel e le pipeline di Bitbucket."</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Cappellozza</dc:creator>
                <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>

                                    <media:content
                            medium="image"
                            url="https://laravel-news.it/assets/articles/laravel-day.png"
                            type="image/jpeg"
                            width="150"
                            height="150" />
                            </item>
            </channel>
</rss>